use table_to_html::{Alignment, Entity, HtmlTable, Margin, Padding};
use tabled::Table;

#[test]
fn table_iter_fmt() {
    let table = HtmlTable::new([["123", "324", "zxc"], ["123", "324", "zxc"]]).to_string();

    assert_eq!(
        table,
        concat!(
            "<table>\n",
            "    <tbody>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "    </tbody>\n",
            "</table>",
        )
    )
}

#[test]
fn table_fmt() {
    let builder = Table::builder([["123", "324", "zxc"], ["123", "324", "zxc"]]);
    let table = HtmlTable::from(builder).to_string();

    assert_eq!(
        table,
        concat!(
            "<table>\n",
            "    <thead>\n",
            "        <tr>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        0\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        1\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "        </tr>\n",
            "    </thead>\n",
            "    <tbody>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "    </tbody>\n",
            "</table>",
        )
    )
}

#[test]
fn table_fmt_multiline() {
    let builder = Table::builder([
        ["1\n2\n3", "3\n2\n4", "z\nx\nc"],
        ["12\n3", "32\n4", "zx\nc"],
    ]);
    let table = HtmlTable::from(builder).to_string();

    assert_eq!(
        table,
        concat!(
            "<table>\n",
            "    <thead>\n",
            "        <tr>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        0\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        1\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "        </tr>\n",
            "    </thead>\n",
            "    <tbody>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        1\n",
            "                    </p>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                    <p>\n",
            "                        3\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        3\n",
            "                    </p>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                    <p>\n",
            "                        4\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        z\n",
            "                    </p>\n",
            "                    <p>\n",
            "                        x\n",
            "                    </p>\n",
            "                    <p>\n",
            "                        c\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        12\n",
            "                    </p>\n",
            "                    <p>\n",
            "                        3\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        32\n",
            "                    </p>\n",
            "                    <p>\n",
            "                        4\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zx\n",
            "                    </p>\n",
            "                    <p>\n",
            "                        c\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "    </tbody>\n",
            "</table>",
        )
    )
}

#[test]
fn table_padding_cell() {
    let builder = Table::builder([["123", "324", "zxc"], ["123", "324", "zxc"]]);
    let mut table = HtmlTable::from(builder);
    table.set_padding(Entity::Cell(1, 1), Padding::filled(4));

    let table = table.to_string();

    assert_eq!(
            table,
            concat!(
                "<style>\n",
                "    table:has(thead) > tbody > :nth-child(1) > :nth-child(2), table:not(:has(thead)) > tbody > :nth-child(2) > :nth-child(2) {\n",
                "      padding-bottom: 4px;\n",
                "      padding-left: 4px;\n",
                "      padding-right: 4px;\n",
                "      padding-top: 4px;\n",
                "    }\n",
                "</style>\n",
                "<table>\n",
                "    <thead>\n",
                "        <tr>\n",
                "            <th>\n",
                "                <div>\n",
                "                    <p>\n",
                "                        0\n",
                "                    </p>\n",
                "                </div>\n",
                "            </th>\n",
                "            <th>\n",
                "                <div>\n",
                "                    <p>\n",
                "                        1\n",
                "                    </p>\n",
                "                </div>\n",
                "            </th>\n",
                "            <th>\n",
                "                <div>\n",
                "                    <p>\n",
                "                        2\n",
                "                    </p>\n",
                "                </div>\n",
                "            </th>\n",
                "        </tr>\n",
                "    </thead>\n",
                "    <tbody>\n",
                "        <tr>\n",
                "            <td>\n",
                "                <div>\n",
                "                    <p>\n",
                "                        123\n",
                "                    </p>\n",
                "                </div>\n",
                "            </td>\n",
                "            <td>\n",
                "                <div>\n",
                "                    <p>\n",
                "                        324\n",
                "                    </p>\n",
                "                </div>\n",
                "            </td>\n",
                "            <td>\n",
                "                <div>\n",
                "                    <p>\n",
                "                        zxc\n",
                "                    </p>\n",
                "                </div>\n",
                "            </td>\n",
                "        </tr>\n",
                "        <tr>\n",
                "            <td>\n",
                "                <div>\n",
                "                    <p>\n",
                "                        123\n",
                "                    </p>\n",
                "                </div>\n",
                "            </td>\n",
                "            <td>\n",
                "                <div>\n",
                "                    <p>\n",
                "                        324\n",
                "                    </p>\n",
                "                </div>\n",
                "            </td>\n",
                "            <td>\n",
                "                <div>\n",
                "                    <p>\n",
                "                        zxc\n",
                "                    </p>\n",
                "                </div>\n",
                "            </td>\n",
                "        </tr>\n",
                "    </tbody>\n",
                "</table>",
            )
        )
}

#[test]
fn table_padding_row() {
    let builder = Table::builder([["123", "324", "zxc"], ["123", "324", "zxc"]]);
    let mut table = HtmlTable::from(builder);
    table.set_padding(Entity::Row(1), Padding::filled(4));

    let table = table.to_string();

    assert_eq!(
        table,
        concat!(
            "<style>\n",
            "    tbody > :nth-child(2) > td, thead > :nth-child(2) > th {\n",
            "      padding-bottom: 4px;\n",
            "      padding-left: 4px;\n",
            "      padding-right: 4px;\n",
            "      padding-top: 4px;\n",
            "    }\n",
            "</style>\n",
            "<table>\n",
            "    <thead>\n",
            "        <tr>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        0\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        1\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "        </tr>\n",
            "    </thead>\n",
            "    <tbody>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "    </tbody>\n",
            "</table>",
        )
    )
}

#[test]
fn table_padding_column() {
    let builder = Table::builder([["123", "324", "zxc"], ["123", "324", "zxc"]]);
    let mut table = HtmlTable::from(builder);
    table.set_padding(Entity::Column(1), Padding::filled(40));

    let table = table.to_string();

    assert_eq!(
        table,
        concat!(
            "<style>\n",
            "    tbody > tr > :nth-child(2), thead > tr > :nth-child(2) {\n",
            "      padding-bottom: 40px;\n",
            "      padding-left: 40px;\n",
            "      padding-right: 40px;\n",
            "      padding-top: 40px;\n",
            "    }\n",
            "</style>\n",
            "<table>\n",
            "    <thead>\n",
            "        <tr>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        0\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        1\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "        </tr>\n",
            "    </thead>\n",
            "    <tbody>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "    </tbody>\n",
            "</table>",
        )
    )
}

#[test]
fn table_padding_global() {
    let builder = Table::builder([["123", "324", "zxc"], ["123", "324", "zxc"]]);
    let mut table = HtmlTable::from(builder);
    table.set_padding(Entity::Global, Padding::new(50, 30, 10, 0));

    let table = table.to_string();

    assert_eq!(
        table,
        concat!(
            "<style>\n",
            "    tbody > tr > td, thead > tr > th {\n",
            "      padding-bottom: 0px;\n",
            "      padding-left: 50px;\n",
            "      padding-right: 30px;\n",
            "      padding-top: 10px;\n",
            "    }\n",
            "</style>\n",
            "<table>\n",
            "    <thead>\n",
            "        <tr>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        0\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        1\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "        </tr>\n",
            "    </thead>\n",
            "    <tbody>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "    </tbody>\n",
            "</table>",
        )
    )
}

#[test]
fn table_alignment_left() {
    let builder = Table::builder([["123", "324", "zxc"], ["123", "324", "zxc"]]);
    let mut table = HtmlTable::from(builder);
    table.set_alignment(Entity::Global, Alignment::left());

    let table = table.to_string();

    assert_eq!(
        table,
        concat!(
            "<style>\n",
            "    tbody > tr > td, thead > tr > th {\n",
            "      text-align: left;\n",
            "    }\n",
            "</style>\n",
            "<table>\n",
            "    <thead>\n",
            "        <tr>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        0\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        1\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "        </tr>\n",
            "    </thead>\n",
            "    <tbody>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "    </tbody>\n",
            "</table>",
        )
    )
}

#[test]
fn table_span_column() {
    let builder = Table::builder([["123", "324", "zxc"], ["123", "324", "zxc"]]);
    let mut table = HtmlTable::from(builder);
    table.set_column_span((0, 0), 3);

    let table = table.to_string();

    assert_eq!(
        table,
        concat!(
            "<table>\n",
            "    <thead>\n",
            "        <tr>\n",
            "            <th colspan=\"3\">\n",
            "                <div>\n",
            "                    <p>\n",
            "                        0\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        1\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "        </tr>\n",
            "    </thead>\n",
            "    <tbody>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "    </tbody>\n",
            "</table>",
        )
    )
}

#[test]
fn table_span_row() {
    let builder = Table::builder([["123", "324", "zxc"], ["123", "324", "zxc"]]);
    let mut table = HtmlTable::from(builder);
    table.set_row_span((1, 1), 2);

    let table = table.to_string();

    assert_eq!(
        table,
        concat!(
            "<table>\n",
            "    <thead>\n",
            "        <tr>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        0\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        1\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "        </tr>\n",
            "    </thead>\n",
            "    <tbody>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td rowspan=\"2\">\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "    </tbody>\n",
            "</table>",
        )
    )
}

#[test]
fn table_span_row_and_span_col() {
    let builder = Table::builder([["123", "324", "zxc"], ["123", "324", "zxc"]]);
    let mut table = HtmlTable::from(builder);
    table.set_row_span((2, 1), 2);
    table.set_column_span((2, 1), 2);

    let table = table.to_string();

    assert_eq!(
        table,
        concat!(
            "<table>\n",
            "    <thead>\n",
            "        <tr>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        0\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        1\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "        </tr>\n",
            "    </thead>\n",
            "    <tbody>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td rowspan=\"2\" colspan=\"2\">\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "    </tbody>\n",
            "</table>",
        )
    )
}

#[test]
fn table_margin() {
    let builder = Table::builder([["123", "324", "zxc"], ["123", "324", "zxc"]]);
    let mut table = HtmlTable::from(builder);
    table.set_margin(Margin::new(5, 4, 3, 2));
    let table = table.to_string();

    assert_eq!(
        table,
        concat!(
            "<style>\n",
            "    table {\n",
            "      margin-bottom: 2;\n",
            "      margin-left: 5;\n",
            "      margin-right: 4;\n",
            "      margin-top: 3;\n",
            "    }\n",
            "</style>\n",
            "<table>\n",
            "    <thead>\n",
            "        <tr>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        0\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        1\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "        </tr>\n",
            "    </thead>\n",
            "    <tbody>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "    </tbody>\n",
            "</table>",
        )
    )
}

#[test]
fn table_border() {
    let builder = Table::builder([["123", "324", "zxc"], ["123", "324", "zxc"]]);
    let mut table = HtmlTable::from(builder);
    table.set_border(10);
    let table = table.to_string();

    assert_eq!(
        table,
        concat!(
            "<style>\n",
            "    table, th, td {\n",
            "      border: 10px solid;\n",
            "    }\n",
            "</style>\n",
            "<table>\n",
            "    <thead>\n",
            "        <tr>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        0\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        1\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "            <th>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        2\n",
            "                    </p>\n",
            "                </div>\n",
            "            </th>\n",
            "        </tr>\n",
            "    </thead>\n",
            "    <tbody>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "        <tr>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        123\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        324\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "            <td>\n",
            "                <div>\n",
            "                    <p>\n",
            "                        zxc\n",
            "                    </p>\n",
            "                </div>\n",
            "            </td>\n",
            "        </tr>\n",
            "    </tbody>\n",
            "</table>",
        )
    )
}
