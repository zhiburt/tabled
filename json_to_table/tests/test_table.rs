use json_to_table::{json_to_table, Orientation};
use serde_json::json;
use tabled::settings::Style;

#[test]
fn general_json_1_test() {
    let value = json!(
        {"widget": {
            "debug": "on",
            "window": {
                "title": "Sample Konfabulator Widget",
                "name": "main_window",
                "width": 500,
                "height": 500
            },
            "image": {
                "src": "Images/Sun.png",
                "name": "sun1",
                "hOffset": 250,
                "vOffset": 250,
                "alignment": "center"
            },
            "text": {
                "data": "Click Here",
                "size": 36,
                "style": "bold",
                "name": "text1",
                "hOffset": 250,
                "vOffset": 100,
                "alignment": "center",
                "onMouseUp": "sun1.opacity = (sun1.opacity / 100) * 90;"
            }
        }}
    );

    let table = json_to_table(&value).with(Style::extended()).to_string();

    assert_eq!(
        table,
        concat!(
            "╔════════╦══════════════════════════════════════════════════════════════════════════╗\n",
            "║ widget ║ ╔════════╦═════════════════════════════════════════════════════════════╗ ║\n",
            "║        ║ ║ debug  ║  on                                                         ║ ║\n",
            "║        ║ ╠════════╬═════════════════════════════════════════════════════════════╣ ║\n",
            "║        ║ ║ image  ║ ╔═══════════╦══════════════════╗                            ║ ║\n",
            "║        ║ ║        ║ ║ alignment ║  center          ║                            ║ ║\n",
            "║        ║ ║        ║ ╠═══════════╬══════════════════╣                            ║ ║\n",
            "║        ║ ║        ║ ║ hOffset   ║  250             ║                            ║ ║\n",
            "║        ║ ║        ║ ╠═══════════╬══════════════════╣                            ║ ║\n",
            "║        ║ ║        ║ ║ name      ║  sun1            ║                            ║ ║\n",
            "║        ║ ║        ║ ╠═══════════╬══════════════════╣                            ║ ║\n",
            "║        ║ ║        ║ ║ src       ║  Images/Sun.png  ║                            ║ ║\n",
            "║        ║ ║        ║ ╠═══════════╬══════════════════╣                            ║ ║\n",
            "║        ║ ║        ║ ║ vOffset   ║  250             ║                            ║ ║\n",
            "║        ║ ║        ║ ╚═══════════╩══════════════════╝                            ║ ║\n",
            "║        ║ ╠════════╬═════════════════════════════════════════════════════════════╣ ║\n",
            "║        ║ ║ text   ║ ╔═══════════╦═════════════════════════════════════════════╗ ║ ║\n",
            "║        ║ ║        ║ ║ alignment ║  center                                     ║ ║ ║\n",
            "║        ║ ║        ║ ╠═══════════╬═════════════════════════════════════════════╣ ║ ║\n",
            "║        ║ ║        ║ ║ data      ║  Click Here                                 ║ ║ ║\n",
            "║        ║ ║        ║ ╠═══════════╬═════════════════════════════════════════════╣ ║ ║\n",
            "║        ║ ║        ║ ║ hOffset   ║  250                                        ║ ║ ║\n",
            "║        ║ ║        ║ ╠═══════════╬═════════════════════════════════════════════╣ ║ ║\n",
            "║        ║ ║        ║ ║ name      ║  text1                                      ║ ║ ║\n",
            "║        ║ ║        ║ ╠═══════════╬═════════════════════════════════════════════╣ ║ ║\n",
            "║        ║ ║        ║ ║ onMouseUp ║  sun1.opacity = (sun1.opacity / 100) * 90;  ║ ║ ║\n",
            "║        ║ ║        ║ ╠═══════════╬═════════════════════════════════════════════╣ ║ ║\n",
            "║        ║ ║        ║ ║ size      ║  36                                         ║ ║ ║\n",
            "║        ║ ║        ║ ╠═══════════╬═════════════════════════════════════════════╣ ║ ║\n",
            "║        ║ ║        ║ ║ style     ║  bold                                       ║ ║ ║\n",
            "║        ║ ║        ║ ╠═══════════╬═════════════════════════════════════════════╣ ║ ║\n",
            "║        ║ ║        ║ ║ vOffset   ║  100                                        ║ ║ ║\n",
            "║        ║ ║        ║ ╚═══════════╩═════════════════════════════════════════════╝ ║ ║\n",
            "║        ║ ╠════════╬═════════════════════════════════════════════════════════════╣ ║\n",
            "║        ║ ║ window ║ ╔════════╦══════════════════════════════╗                   ║ ║\n",
            "║        ║ ║        ║ ║ height ║  500                         ║                   ║ ║\n",
            "║        ║ ║        ║ ╠════════╬══════════════════════════════╣                   ║ ║\n",
            "║        ║ ║        ║ ║ name   ║  main_window                 ║                   ║ ║\n",
            "║        ║ ║        ║ ╠════════╬══════════════════════════════╣                   ║ ║\n",
            "║        ║ ║        ║ ║ title  ║  Sample Konfabulator Widget  ║                   ║ ║\n",
            "║        ║ ║        ║ ╠════════╬══════════════════════════════╣                   ║ ║\n",
            "║        ║ ║        ║ ║ width  ║  500                         ║                   ║ ║\n",
            "║        ║ ║        ║ ╚════════╩══════════════════════════════╝                   ║ ║\n",
            "║        ║ ╚════════╩═════════════════════════════════════════════════════════════╝ ║\n",
            "╚════════╩══════════════════════════════════════════════════════════════════════════╝",
        )
    );

    let table = json_to_table(&value)
        .with(Style::extended())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "╔════════╦════════╦═══════════════════════════════════════════════════════╗\n",
            "║ widget ║ debug  ║ on                                                    ║\n",
            "║        ╠════════╬═══════════╦═══════════════════════════════════════════╣\n",
            "║        ║ image  ║ alignment ║ center                                    ║\n",
            "║        ║        ╠═══════════╬═══════════════════════════════════════════╣\n",
            "║        ║        ║ hOffset   ║ 250                                       ║\n",
            "║        ║        ╠═══════════╬═══════════════════════════════════════════╣\n",
            "║        ║        ║ name      ║ sun1                                      ║\n",
            "║        ║        ╠═══════════╬═══════════════════════════════════════════╣\n",
            "║        ║        ║ src       ║ Images/Sun.png                            ║\n",
            "║        ║        ╠═══════════╬═══════════════════════════════════════════╣\n",
            "║        ║        ║ vOffset   ║ 250                                       ║\n",
            "║        ╠════════╬═══════════╬═══════════════════════════════════════════╣\n",
            "║        ║ text   ║ alignment ║ center                                    ║\n",
            "║        ║        ╠═══════════╬═══════════════════════════════════════════╣\n",
            "║        ║        ║ data      ║ Click Here                                ║\n",
            "║        ║        ╠═══════════╬═══════════════════════════════════════════╣\n",
            "║        ║        ║ hOffset   ║ 250                                       ║\n",
            "║        ║        ╠═══════════╬═══════════════════════════════════════════╣\n",
            "║        ║        ║ name      ║ text1                                     ║\n",
            "║        ║        ╠═══════════╬═══════════════════════════════════════════╣\n",
            "║        ║        ║ onMouseUp ║ sun1.opacity = (sun1.opacity / 100) * 90; ║\n",
            "║        ║        ╠═══════════╬═══════════════════════════════════════════╣\n",
            "║        ║        ║ size      ║ 36                                        ║\n",
            "║        ║        ╠═══════════╬═══════════════════════════════════════════╣\n",
            "║        ║        ║ style     ║ bold                                      ║\n",
            "║        ║        ╠═══════════╬═══════════════════════════════════════════╣\n",
            "║        ║        ║ vOffset   ║ 100                                       ║\n",
            "║        ╠════════╬════════╦══╩═══════════════════════════════════════════╣\n",
            "║        ║ window ║ height ║ 500                                          ║\n",
            "║        ║        ╠════════╬══════════════════════════════════════════════╣\n",
            "║        ║        ║ name   ║ main_window                                  ║\n",
            "║        ║        ╠════════╬══════════════════════════════════════════════╣\n",
            "║        ║        ║ title  ║ Sample Konfabulator Widget                   ║\n",
            "║        ║        ╠════════╬══════════════════════════════════════════════╣\n",
            "║        ║        ║ width  ║ 500                                          ║\n",
            "╚════════╩════════╩════════╩══════════════════════════════════════════════╝",
        )
    );
}

#[test]
fn general_json_2_test() {
    let value = json!(
        {
            "glossary": {
                "title": "example glossary",
                "GlossDiv": {
                    "title": "S",
                    "GlossList": {
                        "GlossEntry": {
                            "ID": "SGML",
                            "SortAs": "SGML",
                            "GlossTerm": "Standard Generalized Markup Language",
                            "Acronym": "SGML",
                            "Abbrev": "ISO 8879:1986",
                            "GlossDef": {
                                "para": "A meta-markup language, used to create markup languages such as DocBook.",
                                "GlossSeeAlso": ["GML", "XML"]
                            },
                            "GlossSee": "markup"
                        }
                    }
                }
            }
        }
    );

    let table = json_to_table(&value).with(Style::modern()).to_string();

    assert_eq!(
        table,
        concat!(
            "┌──────────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐\n",
            "│ glossary │ ┌──────────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │\n",
            "│          │ │ GlossDiv │ ┌───────────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ │\n",
            "│          │ │          │ │ GlossList │ ┌────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ │ │\n",
            "│          │ │          │ │           │ │ GlossEntry │ ┌───────────┬───────────────────────────────────────────────────────────────────────────────────────────────┐ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │ Abbrev    │  ISO 8879:1986                                                                                │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ ├───────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │ Acronym   │  SGML                                                                                         │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ ├───────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │ GlossDef  │ ┌──────────────┬────────────────────────────────────────────────────────────────────────────┐ │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │           │ │ GlossSeeAlso │ ┌───────┐                                                                  │ │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │           │ │              │ │  GML  │                                                                  │ │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │           │ │              │ ├───────┤                                                                  │ │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │           │ │              │ │  XML  │                                                                  │ │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │           │ │              │ └───────┘                                                                  │ │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │           │ ├──────────────┼────────────────────────────────────────────────────────────────────────────┤ │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │           │ │ para         │  A meta-markup language, used to create markup languages such as DocBook.  │ │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │           │ └──────────────┴────────────────────────────────────────────────────────────────────────────┘ │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ ├───────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │ GlossSee  │  markup                                                                                       │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ ├───────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │ GlossTerm │  Standard Generalized Markup Language                                                         │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ ├───────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │ ID        │  SGML                                                                                         │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ ├───────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ │ SortAs    │  SGML                                                                                         │ │ │ │ │\n",
            "│          │ │          │ │           │ │            │ └───────────┴───────────────────────────────────────────────────────────────────────────────────────────────┘ │ │ │ │\n",
            "│          │ │          │ │           │ └────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │ │ │\n",
            "│          │ │          │ ├───────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤ │ │\n",
            "│          │ │          │ │ title     │  S                                                                                                                             │ │ │\n",
            "│          │ │          │ └───────────┴────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │ │\n",
            "│          │ ├──────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤ │\n",
            "│          │ │ title    │  example glossary                                                                                                                              │ │\n",
            "│          │ └──────────┴────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │\n",
            "└──────────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘",
        )
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌──────────┬──────────┬───────────┬────────────┬───────────┬─────────────────────────────────────────────────────────────────────────────────────────┐\n",
            "│ glossary │ GlossDiv │ GlossList │ GlossEntry │ Abbrev    │ ISO 8879:1986                                                                           │\n",
            "│          │          │           │            ├───────────┼─────────────────────────────────────────────────────────────────────────────────────────┤\n",
            "│          │          │           │            │ Acronym   │ SGML                                                                                    │\n",
            "│          │          │           │            ├───────────┼──────────────┬──────────────────────────────────────────────────────────────────────────┤\n",
            "│          │          │           │            │ GlossDef  │ GlossSeeAlso │ GML                                                                      │\n",
            "│          │          │           │            │           │              ├──────────────────────────────────────────────────────────────────────────┤\n",
            "│          │          │           │            │           │              │ XML                                                                      │\n",
            "│          │          │           │            │           ├──────────────┼──────────────────────────────────────────────────────────────────────────┤\n",
            "│          │          │           │            │           │ para         │ A meta-markup language, used to create markup languages such as DocBook. │\n",
            "│          │          │           │            ├───────────┼──────────────┴──────────────────────────────────────────────────────────────────────────┤\n",
            "│          │          │           │            │ GlossSee  │ markup                                                                                  │\n",
            "│          │          │           │            ├───────────┼─────────────────────────────────────────────────────────────────────────────────────────┤\n",
            "│          │          │           │            │ GlossTerm │ Standard Generalized Markup Language                                                    │\n",
            "│          │          │           │            ├───────────┼─────────────────────────────────────────────────────────────────────────────────────────┤\n",
            "│          │          │           │            │ ID        │ SGML                                                                                    │\n",
            "│          │          │           │            ├───────────┼─────────────────────────────────────────────────────────────────────────────────────────┤\n",
            "│          │          │           │            │ SortAs    │ SGML                                                                                    │\n",
            "│          │          ├───────────┼────────────┴───────────┴─────────────────────────────────────────────────────────────────────────────────────────┤\n",
            "│          │          │ title     │ S                                                                                                                │\n",
            "│          ├──────────┼───────────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤\n",
            "│          │ title    │ example glossary                                                                                                             │\n",
            "└──────────┴──────────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘",
        )
    );
}

#[test]
fn general_json_3_test() {
    let value = json!(
        {"menu": {
            "header": "SVG Viewer",
            "items": [
                {"id": "Open"},
                {"id": "OpenNew", "label": "Open New"},
                null,
                {"id": "ZoomIn", "label": "Zoom In"},
                {"id": "ZoomOut", "label": "Zoom Out"},
                {"id": "OriginalView", "label": "Original View"},
                null,
                {"id": "Quality"},
                {"id": "Pause"},
                {"id": "Mute"},
                null,
                {"id": "Find", "label": "Find..."},
                {"id": "FindAgain", "label": "Find Again"},
                {"id": "Copy"},
                {"id": "CopyAgain", "label": "Copy Again"},
                {"id": "CopySVG", "label": "Copy SVG"},
                {"id": "ViewSVG", "label": "View SVG"},
                {"id": "ViewSource", "label": "View Source"},
                {"id": "SaveAs", "label": "Save As"},
                null,
                {"id": "Help"},
                {"id": "About", "label": "About Adobe CVG Viewer..."}
            ]
        }}
    );

    let table = json_to_table(&value).with(Style::modern()).to_string();

    assert_eq!(
        table,
        concat!(
            "┌──────┬──────────────────────────────────────────────────────────┐\n",
            "│ menu │ ┌────────┬─────────────────────────────────────────────┐ │\n",
            "│      │ │ header │  SVG Viewer                                 │ │\n",
            "│      │ ├────────┼─────────────────────────────────────────────┤ │\n",
            "│      │ │ items  │ ┌─────────────────────────────────────────┐ │ │\n",
            "│      │ │        │ │ ┌────┬────────┐                         │ │ │\n",
            "│      │ │        │ │ │ id │  Open  │                         │ │ │\n",
            "│      │ │        │ │ └────┴────────┘                         │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌───────┬────────────┐                  │ │ │\n",
            "│      │ │        │ │ │ id    │  OpenNew   │                  │ │ │\n",
            "│      │ │        │ │ ├───────┼────────────┤                  │ │ │\n",
            "│      │ │        │ │ │ label │  Open New  │                  │ │ │\n",
            "│      │ │        │ │ └───────┴────────────┘                  │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │                                         │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌───────┬───────────┐                   │ │ │\n",
            "│      │ │        │ │ │ id    │  ZoomIn   │                   │ │ │\n",
            "│      │ │        │ │ ├───────┼───────────┤                   │ │ │\n",
            "│      │ │        │ │ │ label │  Zoom In  │                   │ │ │\n",
            "│      │ │        │ │ └───────┴───────────┘                   │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌───────┬────────────┐                  │ │ │\n",
            "│      │ │        │ │ │ id    │  ZoomOut   │                  │ │ │\n",
            "│      │ │        │ │ ├───────┼────────────┤                  │ │ │\n",
            "│      │ │        │ │ │ label │  Zoom Out  │                  │ │ │\n",
            "│      │ │        │ │ └───────┴────────────┘                  │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌───────┬─────────────────┐             │ │ │\n",
            "│      │ │        │ │ │ id    │  OriginalView   │             │ │ │\n",
            "│      │ │        │ │ ├───────┼─────────────────┤             │ │ │\n",
            "│      │ │        │ │ │ label │  Original View  │             │ │ │\n",
            "│      │ │        │ │ └───────┴─────────────────┘             │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │                                         │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌────┬───────────┐                      │ │ │\n",
            "│      │ │        │ │ │ id │  Quality  │                      │ │ │\n",
            "│      │ │        │ │ └────┴───────────┘                      │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌────┬─────────┐                        │ │ │\n",
            "│      │ │        │ │ │ id │  Pause  │                        │ │ │\n",
            "│      │ │        │ │ └────┴─────────┘                        │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌────┬────────┐                         │ │ │\n",
            "│      │ │        │ │ │ id │  Mute  │                         │ │ │\n",
            "│      │ │        │ │ └────┴────────┘                         │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │                                         │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌───────┬───────────┐                   │ │ │\n",
            "│      │ │        │ │ │ id    │  Find     │                   │ │ │\n",
            "│      │ │        │ │ ├───────┼───────────┤                   │ │ │\n",
            "│      │ │        │ │ │ label │  Find...  │                   │ │ │\n",
            "│      │ │        │ │ └───────┴───────────┘                   │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌───────┬──────────────┐                │ │ │\n",
            "│      │ │        │ │ │ id    │  FindAgain   │                │ │ │\n",
            "│      │ │        │ │ ├───────┼──────────────┤                │ │ │\n",
            "│      │ │        │ │ │ label │  Find Again  │                │ │ │\n",
            "│      │ │        │ │ └───────┴──────────────┘                │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌────┬────────┐                         │ │ │\n",
            "│      │ │        │ │ │ id │  Copy  │                         │ │ │\n",
            "│      │ │        │ │ └────┴────────┘                         │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌───────┬──────────────┐                │ │ │\n",
            "│      │ │        │ │ │ id    │  CopyAgain   │                │ │ │\n",
            "│      │ │        │ │ ├───────┼──────────────┤                │ │ │\n",
            "│      │ │        │ │ │ label │  Copy Again  │                │ │ │\n",
            "│      │ │        │ │ └───────┴──────────────┘                │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌───────┬────────────┐                  │ │ │\n",
            "│      │ │        │ │ │ id    │  CopySVG   │                  │ │ │\n",
            "│      │ │        │ │ ├───────┼────────────┤                  │ │ │\n",
            "│      │ │        │ │ │ label │  Copy SVG  │                  │ │ │\n",
            "│      │ │        │ │ └───────┴────────────┘                  │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌───────┬────────────┐                  │ │ │\n",
            "│      │ │        │ │ │ id    │  ViewSVG   │                  │ │ │\n",
            "│      │ │        │ │ ├───────┼────────────┤                  │ │ │\n",
            "│      │ │        │ │ │ label │  View SVG  │                  │ │ │\n",
            "│      │ │        │ │ └───────┴────────────┘                  │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌───────┬───────────────┐               │ │ │\n",
            "│      │ │        │ │ │ id    │  ViewSource   │               │ │ │\n",
            "│      │ │        │ │ ├───────┼───────────────┤               │ │ │\n",
            "│      │ │        │ │ │ label │  View Source  │               │ │ │\n",
            "│      │ │        │ │ └───────┴───────────────┘               │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌───────┬───────────┐                   │ │ │\n",
            "│      │ │        │ │ │ id    │  SaveAs   │                   │ │ │\n",
            "│      │ │        │ │ ├───────┼───────────┤                   │ │ │\n",
            "│      │ │        │ │ │ label │  Save As  │                   │ │ │\n",
            "│      │ │        │ │ └───────┴───────────┘                   │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │                                         │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌────┬────────┐                         │ │ │\n",
            "│      │ │        │ │ │ id │  Help  │                         │ │ │\n",
            "│      │ │        │ │ └────┴────────┘                         │ │ │\n",
            "│      │ │        │ ├─────────────────────────────────────────┤ │ │\n",
            "│      │ │        │ │ ┌───────┬─────────────────────────────┐ │ │ │\n",
            "│      │ │        │ │ │ id    │  About                      │ │ │ │\n",
            "│      │ │        │ │ ├───────┼─────────────────────────────┤ │ │ │\n",
            "│      │ │        │ │ │ label │  About Adobe CVG Viewer...  │ │ │ │\n",
            "│      │ │        │ │ └───────┴─────────────────────────────┘ │ │ │\n",
            "│      │ │        │ └─────────────────────────────────────────┘ │ │\n",
            "│      │ └────────┴─────────────────────────────────────────────┘ │\n",
            "└──────┴──────────────────────────────────────────────────────────┘",
        )
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌──────┬────────┬───────────────────────────────────┐\n",
            "│ menu │ header │ SVG Viewer                        │\n",
            "│      ├────────┼────┬──────────────────────────────┤\n",
            "│      │ items  │ id │ Open                         │\n",
            "│      │        ├────┴──┬───────────────────────────┤\n",
            "│      │        │ id    │ OpenNew                   │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ label │ Open New                  │\n",
            "│      │        ├───────┴───────────────────────────┤\n",
            "│      │        │                                   │\n",
            "│      │        ├───────┬───────────────────────────┤\n",
            "│      │        │ id    │ ZoomIn                    │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ label │ Zoom In                   │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ id    │ ZoomOut                   │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ label │ Zoom Out                  │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ id    │ OriginalView              │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ label │ Original View             │\n",
            "│      │        ├───────┴───────────────────────────┤\n",
            "│      │        │                                   │\n",
            "│      │        ├────┬──────────────────────────────┤\n",
            "│      │        │ id │ Quality                      │\n",
            "│      │        ├────┼──────────────────────────────┤\n",
            "│      │        │ id │ Pause                        │\n",
            "│      │        ├────┼──────────────────────────────┤\n",
            "│      │        │ id │ Mute                         │\n",
            "│      │        ├────┴──────────────────────────────┤\n",
            "│      │        │                                   │\n",
            "│      │        ├───────┬───────────────────────────┤\n",
            "│      │        │ id    │ Find                      │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ label │ Find...                   │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ id    │ FindAgain                 │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ label │ Find Again                │\n",
            "│      │        ├────┬──┴───────────────────────────┤\n",
            "│      │        │ id │ Copy                         │\n",
            "│      │        ├────┴──┬───────────────────────────┤\n",
            "│      │        │ id    │ CopyAgain                 │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ label │ Copy Again                │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ id    │ CopySVG                   │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ label │ Copy SVG                  │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ id    │ ViewSVG                   │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ label │ View SVG                  │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ id    │ ViewSource                │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ label │ View Source               │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ id    │ SaveAs                    │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ label │ Save As                   │\n",
            "│      │        ├───────┴───────────────────────────┤\n",
            "│      │        │                                   │\n",
            "│      │        ├────┬──────────────────────────────┤\n",
            "│      │        │ id │ Help                         │\n",
            "│      │        ├────┴──┬───────────────────────────┤\n",
            "│      │        │ id    │ About                     │\n",
            "│      │        ├───────┼───────────────────────────┤\n",
            "│      │        │ label │ About Adobe CVG Viewer... │\n",
            "└──────┴────────┴───────┴───────────────────────────┘",
        )
    );
}

#[test]
fn many_splits_bettween_map_entries_test() {
    let value = json!(
        {
            "menu": { "heade1": { "heade2": { "heade3": "SVG Viewer" } } },
            "menu2": { "heade4": { "heade5": { "heade6": { "header": { "header": { "header": { "header": "SVG Viewer" } } } } } } },
            "menu3": { "he": { "asdd": { "x": { "1": { "header": { "header": { "header": "SVG Viewer" } } } } } } },
            "menu4": { "he": { "asdd": { "xxxx": { "": { "3333": { "2": { "header": "SVG Viewer" } } } } } } },
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌───────┬────────┬────────┬────────┬────────────────────────────────────────────────┐\n",
            "│ menu  │ heade1 │ heade2 │ heade3 │ SVG Viewer                                     │\n",
            "├───────┼────────┼────────┼────────┼────────┬────────┬────────┬────────┬────────────┤\n",
            "│ menu2 │ heade4 │ heade5 │ heade6 │ header │ header │ header │ header │ SVG Viewer │\n",
            "├───────┼────┬───┴──┬───┬─┴─┬──────┴─┬──────┴─┬──────┴─┬──────┴────────┴────────────┤\n",
            "│ menu3 │ he │ asdd │ x │ 1 │ header │ header │ header │ SVG Viewer                 │\n",
            "├───────┼────┼──────┼───┴──┬┴─┬──────┼───┬────┴───┬────┴────────────────────────────┤\n",
            "│ menu4 │ he │ asdd │ xxxx │  │ 3333 │ 2 │ header │ SVG Viewer                      │\n",
            "└───────┴────┴──────┴──────┴──┴──────┴───┴────────┴─────────────────────────────────┘",
        )
    );
}

#[test]
fn aray_split_test() {
    let value = json!(
        {
            "menu2": [ { "heade1": { "heade3": "SVG Viewe1" } }, { "heade5": { "heade7": "SVG Viewe9" } } ],
            "menu3": [ { "heade2": { "heade4": "SVG Viewe2" } }, { "heade6": { "heade8": "SVG View10" } } ],
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌───────┬────────┬────────┬────────────┐\n",
            "│ menu2 │ heade1 │ heade3 │ SVG Viewe1 │\n",
            "│       ├────────┼────────┼────────────┤\n",
            "│       │ heade5 │ heade7 │ SVG Viewe9 │\n",
            "├───────┼────────┼────────┼────────────┤\n",
            "│ menu3 │ heade2 │ heade4 │ SVG Viewe2 │\n",
            "│       ├────────┼────────┼────────────┤\n",
            "│       │ heade6 │ heade8 │ SVG View10 │\n",
            "└───────┴────────┴────────┴────────────┘",
        )
    );
}

#[test]
fn aray_split_test2() {
    let value = json!({
        "menu2": [
            { "heade1": { "heade3": "SVG Viewe1" } },
            { "heade5": { "heade7": "SVG Viewe9" } },
        ],
    });

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌───────┬────────┬────────┬────────────┐\n",
            "│ menu2 │ heade1 │ heade3 │ SVG Viewe1 │\n",
            "│       ├────────┼────────┼────────────┤\n",
            "│       │ heade5 │ heade7 │ SVG Viewe9 │\n",
            "└───────┴────────┴────────┴────────────┘",
        )
    );
}

#[test]
fn array_split_2_test() {
    let value = json!(
        {
            "menu2": [ { "header": { "header": "SVG Viewer" } }, { "header": { "header": "SVG Viewer" } } ],
            "menu3": [ { "hea": { "header": "SVG Viewer" } }, { "header": { "header": "SVG Viewer" } } ],
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌───────┬────────┬────────┬────────────┐\n",
            "│ menu2 │ header │ header │ SVG Viewer │\n",
            "│       ├────────┼────────┼────────────┤\n",
            "│       │ header │ header │ SVG Viewer │\n",
            "├───────┼─────┬──┴─────┬──┴────────────┤\n",
            "│ menu3 │ hea │ header │ SVG Viewer    │\n",
            "│       ├─────┴──┬─────┴──┬────────────┤\n",
            "│       │ header │ header │ SVG Viewer │\n",
            "└───────┴────────┴────────┴────────────┘",
        )
    );
}

#[test]
fn array_split_4_test() {
    let value = json!(
        {
            "host": { "long_os_version": "", "uptime": 0.0 },
            "men": { "available": 123123.22 },
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌──────┬─────────────────┬─────┐\n",
            "│ host │ long_os_version │     │\n",
            "│      ├─────────────────┼─────┤\n",
            "│      │ uptime          │ 0.0 │\n",
            "├──────┼───────────┬─────┴─────┤\n",
            "│ men  │ available │ 123123.22 │\n",
            "└──────┴───────────┴───────────┘",
        )
    );
}

#[test]
fn array_split_3_test() {
    let value = json!(
        {
            "key1": [
                { "name": "groups" },
                { "root": ["root"] },
                { "git": ["git"]   },
            ]
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌──────┬──────┬────────┐\n",
            "│ key1 │ name │ groups │\n",
            "│      ├──────┼────────┤\n",
            "│      │ root │ root   │\n",
            "│      ├─────┬┴────────┤\n",
            "│      │ git │ git     │\n",
            "└──────┴─────┴─────────┘",
        )
    );
}

#[test]
fn array_split_with_inner_array_test() {
    let value = json!(
        {
            "menu": [
                [ { "key1": 123, "key2": "asd" } ],
                [ { "key": 123, "ke": "asd" } ] ,
            ],
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌──────┬──────┬─────┐\n",
            "│ menu │ key1 │ 123 │\n",
            "│      ├──────┼─────┤\n",
            "│      │ key2 │ asd │\n",
            "│      ├─────┬┴─────┤\n",
            "│      │ ke  │ asd  │\n",
            "│      ├─────┼──────┤\n",
            "│      │ key │ 123  │\n",
            "└──────┴─────┴──────┘",
        )
    );
}

#[test]
fn array_split_with_inner_array_2_test() {
    let value = json!(
        [
            [ [ { "key1": 123 } ], [ "asd", "asd" ] ],
            [ [ { "k": 123 } ], [ "v", "z" ] ],
        ]
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌──────┬─────┐\n",
            "│ key1 │ 123 │\n",
            "├──────┴─────┤\n",
            "│ asd        │\n",
            "├────────────┤\n",
            "│ asd        │\n",
            "├───┬────────┤\n",
            "│ k │ 123    │\n",
            "├───┴────────┤\n",
            "│ v          │\n",
            "├────────────┤\n",
            "│ z          │\n",
            "└────────────┘",
        )
    );
}

#[test]
fn test_map_empty_entity_collapsed_0() {
    let value = json!(
        {
            "field1" : {},
            "field2": "Value",
            "field3" : {},
            "field4": 3,
            "field5" : {}
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌────────┬───────┐\n",
            "│ field1 │       │\n",
            "├────────┼───────┤\n",
            "│ field2 │ Value │\n",
            "├────────┼───────┤\n",
            "│ field3 │       │\n",
            "├────────┼───────┤\n",
            "│ field4 │ 3     │\n",
            "├────────┼───────┤\n",
            "│ field5 │       │\n",
            "└────────┴───────┘",
        )
    );
}

#[test]
fn test_map_empty_entity_collapsed_1() {
    let value = json!(
        {
            "field1" : [],
            "field2": "Value",
            "field3" : [],
            "field4": 3,
            "field5" : []
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌────────┬───────┐\n",
            "│ field1 │       │\n",
            "├────────┼───────┤\n",
            "│ field2 │ Value │\n",
            "├────────┼───────┤\n",
            "│ field3 │       │\n",
            "├────────┼───────┤\n",
            "│ field4 │ 3     │\n",
            "├────────┼───────┤\n",
            "│ field5 │       │\n",
            "└────────┴───────┘",
        )
    );
}

#[test]
fn test_map_empty_entity_collapsed_2() {
    let value = json!(
        {
            "key0": {},
            "field1" : {
                "key1": "value1",
                "key2": []
            },
            "field2": "Value",
            "field3" : [],
            "field4": [
                {},
                "123",
                {},
                "sadas",
                {}
            ],
            "field5" : []
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌────────┬──────┬────────┐\n",
            "│ field1 │ key1 │ value1 │\n",
            "│        ├──────┼────────┤\n",
            "│        │ key2 │        │\n",
            "├────────┼──────┴────────┤\n",
            "│ field2 │ Value         │\n",
            "├────────┼───────────────┤\n",
            "│ field3 │               │\n",
            "├────────┼───────────────┤\n",
            "│ field4 │               │\n",
            "│        ├───────────────┤\n",
            "│        │ 123           │\n",
            "│        ├───────────────┤\n",
            "│        │               │\n",
            "│        ├───────────────┤\n",
            "│        │ sadas         │\n",
            "│        ├───────────────┤\n",
            "│        │               │\n",
            "├────────┼───────────────┤\n",
            "│ field5 │               │\n",
            "├────────┼───────────────┤\n",
            "│ key0   │               │\n",
            "└────────┴───────────────┘",
        )
    );
}

#[test]
fn test_list_empty_entity_collapsed_0() {
    let value = json!([{}, "field1", {}, "field2", {}]);

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌────────┐\n",
            "│        │\n",
            "├────────┤\n",
            "│ field1 │\n",
            "├────────┤\n",
            "│        │\n",
            "├────────┤\n",
            "│ field2 │\n",
            "├────────┤\n",
            "│        │\n",
            "└────────┘",
        )
    );
}

#[test]
fn test_list_empty_entity_collapsed_1() {
    let value = json!([{}, {}, {}]);

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌──┐\n",
            "│  │\n",
            "├──┤\n",
            "│  │\n",
            "├──┤\n",
            "│  │\n",
            "└──┘",
        )
    );
}

#[test]
fn test_list_empty_entity_collapsed_2() {
    let value = json!([[], [], []]);

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌──┐\n",
            "│  │\n",
            "├──┤\n",
            "│  │\n",
            "├──┤\n",
            "│  │\n",
            "└──┘",
        )
    );
}

#[test]
fn test_map_empty_entity_collapsed_1_horizontal() {
    let value = json!(
        {
            "field1" : [],
            "field2": "Value",
            "field3" : [],
            "field4": 3,
            "field5" : []
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .array_orientation(Orientation::Row)
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌────────┬───────┐\n",
            "│ field1 │       │\n",
            "├────────┼───────┤\n",
            "│ field2 │ Value │\n",
            "├────────┼───────┤\n",
            "│ field3 │       │\n",
            "├────────┼───────┤\n",
            "│ field4 │ 3     │\n",
            "├────────┼───────┤\n",
            "│ field5 │       │\n",
            "└────────┴───────┘",
        )
    );
}

#[test]
fn test_map_empty_entity_collapsed_2_horizontal() {
    let value = json!(
        {
            "key0": {},
            "field1" : {
                "key1": "value1",
                "key2": []
            },
            "field2": "Value",
            "field3" : [],
            "field4": [
                {},
                "123",
                {},
                "sadas",
                {}
            ],
            "field5" : []
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .array_orientation(Orientation::Row)
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌────────┬──────┬───────────────┐\n",
            "│ field1 │ key1 │ value1        │\n",
            "│        ├──────┼───────────────┤\n",
            "│        │ key2 │               │\n",
            "├────────┼──────┴───────────────┤\n",
            "│ field2 │ Value                │\n",
            "├────────┼──────────────────────┤\n",
            "│ field3 │                      │\n",
            "├────────┼──┬─────┬──┬───────┬──┤\n",
            "│ field4 │  │ 123 │  │ sadas │  │\n",
            "├────────┼──┴─────┴──┴───────┴──┤\n",
            "│ field5 │                      │\n",
            "├────────┼──────────────────────┤\n",
            "│ key0   │                      │\n",
            "└────────┴──────────────────────┘",
        )
    );
}

#[test]
fn test_list_empty_entity_collapsed_0_horizontal() {
    let value = json!([{}, "field1", {}, "field2", {}]);

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .array_orientation(Orientation::Row)
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌──┬────────┬──┬────────┬──┐\n",
            "│  │ field1 │  │ field2 │  │\n",
            "└──┴────────┴──┴────────┴──┘",
        )
    );
}

#[test]
fn test_list_empty_entity_collapsed_1_horizontal() {
    let value = json!([{}, {}, {}]);

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .array_orientation(Orientation::Row)
        .to_string();

    assert_eq!(
        table,
        concat!("┌──┬──┬──┐\n", "│  │  │  │\n", "└──┴──┴──┘",)
    );
}

#[test]
fn test_list_empty_entity_collapsed_2_horizontal() {
    let value = json!([[], [], []]);

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .array_orientation(Orientation::Row)
        .to_string();

    assert_eq!(
        table,
        concat!("┌──┬──┬──┐\n", "│  │  │  │\n", "└──┴──┴──┘",)
    );
}

#[test]
fn test_map_empty_entity_collapsed_1_horizontal_map() {
    let value = json!(
        {
            "field1" : [],
            "field2": "Value",
            "field3" : [],
            "field4": 3,
            "field5" : []
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .object_orientation(Orientation::Row)
        .to_string();

    assert_eq!(
        table,
        "┌────────┬────────┬────────┬────────┬────────┐\n\
         │ field1 │ field2 │ field3 │ field4 │ field5 │\n\
         ├────────┼────────┼────────┼────────┼────────┤\n\
         │        │ Value  │        │ 3      │        │\n\
         └────────┴────────┴────────┴────────┴────────┘"
    );
}

#[test]
fn test_map_empty_entity_collapsed_2_horizontal_map() {
    let value = json!(
        {
            "key0": {},
            "field1" : {
                "key1": "value1",
                "key2": []
            },
            "field2": "Value",
            "field3" : [],
            "field4": [
                {},
                "123",
                {},
                "sadas",
                {}
            ],
            "field5" : []
        }
    );

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .object_orientation(Orientation::Row)
        .to_string();

    assert_eq!(
        table,
        "┌───────────────┬────────┬────────┬────────┬────────┬──────┐\n\
         │ field1        │ field2 │ field3 │ field4 │ field5 │ key0 │\n\
         ├────────┬──────┼────────┼────────┼────────┼────────┼──────┤\n\
         │ key1   │ key2 │ Value  │        │        │        │      │\n\
         ├────────┼──────┤        │        ├────────┤        │      │\n\
         │ value1 │      │        │        │ 123    │        │      │\n\
         │        │      │        │        ├────────┤        │      │\n\
         │        │      │        │        │        │        │      │\n\
         │        │      │        │        ├────────┤        │      │\n\
         │        │      │        │        │ sadas  │        │      │\n\
         │        │      │        │        ├────────┤        │      │\n\
         │        │      │        │        │        │        │      │\n\
         └────────┴──────┴────────┴────────┴────────┴────────┴──────┘"
    );
}

#[test]
fn test_list_empty_entity_collapsed_0_horizontal_map() {
    let value = json!([{}, "field1", {}, "field2", {}]);

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .object_orientation(Orientation::Row)
        .to_string();

    assert_eq!(
        table,
        "┌────────┐\n\
         │        │\n\
         ├────────┤\n\
         │ field1 │\n\
         ├────────┤\n\
         │        │\n\
         ├────────┤\n\
         │ field2 │\n\
         ├────────┤\n\
         │        │\n\
         └────────┘"
    );
}

#[test]
fn test_list_empty_entity_collapsed_1_horizontal_map() {
    let value = json!([{}, {}, {}]);

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .object_orientation(Orientation::Row)
        .to_string();

    assert_eq!(
        table,
        "┌──┐\n\
         │  │\n\
         ├──┤\n\
         │  │\n\
         ├──┤\n\
         │  │\n\
         └──┘"
    );
}

#[test]
fn test_list_empty_entity_collapsed_2_horizontal_map() {
    let value = json!([[], [], []]);

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .object_orientation(Orientation::Row)
        .to_string();

    assert_eq!(
        table,
        "┌──┐\n\
         │  │\n\
         ├──┤\n\
         │  │\n\
         ├──┤\n\
         │  │\n\
         └──┘"
    );
}

#[test]
fn test_map_empty_entity_plain_0() {
    let value = json!(
        {
            "field1" : {},
            "field2": "Value",
            "field3" : {},
            "field4": 3,
            "field5" : {}
        }
    );

    let table = json_to_table(&value).with(Style::modern()).to_string();

    assert_eq!(
        table,
        concat!(
            "┌────────┬─────────┐\n",
            "│ field1 │         │\n",
            "├────────┼─────────┤\n",
            "│ field2 │  Value  │\n",
            "├────────┼─────────┤\n",
            "│ field3 │         │\n",
            "├────────┼─────────┤\n",
            "│ field4 │  3      │\n",
            "├────────┼─────────┤\n",
            "│ field5 │         │\n",
            "└────────┴─────────┘",
        )
    );
}

#[test]
fn test_list_empty_entity_plain_0() {
    let value = json!([{}, "field1", {}, "field2", {}]);

    let table = json_to_table(&value).with(Style::modern()).to_string();

    assert_eq!(
        table,
        concat!(
            "┌──────────┐\n",
            "│          │\n",
            "├──────────┤\n",
            "│  field1  │\n",
            "├──────────┤\n",
            "│          │\n",
            "├──────────┤\n",
            "│  field2  │\n",
            "├──────────┤\n",
            "│          │\n",
            "└──────────┘",
        )
    );
}

#[test]
fn test_list_empty_entity_plain_1() {
    let value = json!([[], "field1", [], "field2", []]);

    let table = json_to_table(&value).with(Style::modern()).to_string();

    assert_eq!(
        table,
        concat!(
            "┌──────────┐\n",
            "│          │\n",
            "├──────────┤\n",
            "│  field1  │\n",
            "├──────────┤\n",
            "│          │\n",
            "├──────────┤\n",
            "│  field2  │\n",
            "├──────────┤\n",
            "│          │\n",
            "└──────────┘",
        )
    );
}

#[test]
fn test_list_empty_entity_plain_2() {
    let value = json!([{}, {}, {}]);

    let table = json_to_table(&value).with(Style::modern()).to_string();

    assert_eq!(
        table,
        concat!(
            "┌──┐\n",
            "│  │\n",
            "├──┤\n",
            "│  │\n",
            "├──┤\n",
            "│  │\n",
            "└──┘",
        )
    );
}

#[test]
fn test_multiline_key_height_bigger_then_value() {
    let value = json!({
        "config": { "key1": 123, "multi_\n_line_\n_key": false, "key2": {"a long long long key": false} },
    });

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌────────┬────────┬──────────────────────────────┐\n",
            "│ config │ key1   │ 123                          │\n",
            "│        ├────────┼──────────────────────┬───────┤\n",
            "│        │ key2   │ a long long long key │ false │\n",
            "│        ├────────┼──────────────────────┴───────┤\n",
            "│        │ multi_ │ false                        │\n",
            "│        │ _line_ │                              │\n",
            "│        │ _key   │                              │\n",
            "└────────┴────────┴──────────────────────────────┘",
        )
    );
}

#[test]
fn test_multiline_key_height_less_then_value() {
    let value = json!({
        "config": { "key1": 123, "multi_\n_line_\n_key": "1\n2\n3\n4\n5\n6\n7\n", "key2": {"a long long long key": false} },
    });

    let table = json_to_table(&value)
        .with(Style::modern())
        .collapse()
        .to_string();

    assert_eq!(
        table,
        concat!(
            "┌────────┬────────┬──────────────────────────────┐\n",
            "│ config │ key1   │ 123                          │\n",
            "│        ├────────┼──────────────────────┬───────┤\n",
            "│        │ key2   │ a long long long key │ false │\n",
            "│        ├────────┼──────────────────────┴───────┤\n",
            "│        │ multi_ │ 1                            │\n",
            "│        │ _line_ │ 2                            │\n",
            "│        │ _key   │ 3                            │\n",
            "│        │        │ 4                            │\n",
            "│        │        │ 5                            │\n",
            "│        │        │ 6                            │\n",
            "│        │        │ 7                            │\n",
            "│        │        │                              │\n",
            "└────────┴────────┴──────────────────────────────┘",
        )
    );
}
